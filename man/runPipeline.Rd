% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runPipeline.R
\name{runPipeline}
\alias{runPipeline}
\title{runPipeline}
\usage{
runPipeline(datasets, alternatives, pipelineDef, comb = NULL,
  output.prefix = "", nthreads = length(datasets),
  saveEndResults = TRUE, debug = FALSE, ...)
}
\arguments{
\item{datasets}{A named vector of initial objects or paths to rds files.}

\item{alternatives}{The (named) list of alternative values for each 
parameter.}

\item{pipelineDef}{An object of class `PipelineDefinition`.}

\item{comb}{An optional matrix of indexes indicating the combination to run. 
Each column should correspond to an element of `alternatives`, and contain 
indexes relative to this element. If omitted, all combinations will be 
performed.}

\item{output.prefix}{An optional prefix for the output files.}

\item{nthreads}{Number of threads, defaults to the number of datasets.}

\item{saveEndResults}{Logical; whether to save the output of the last step.}

\item{debug}{Logical (default FALSE). When enabled, disables multithreading 
and prints extra information.}

\item{...}{passed to MulticoreParam. Can for instance be used to set 
`makeCluster` arguments, or set `threshold="TRACE"` when debugging in a 
multithreaded context.}
}
\value{
A SimpleList with elapsed time and the results of the evaluation 
functions defined by the given `pipelineDef`.

The results are also stored in the output folder with: 
\itemize{
\item The clustering results for each dataset (`endOutputs.rds` files),
\item A SimpletList of elapsed time and evaluations for each dataset 
 (`evaluation.rds` files),
\item A list of the `pipelineDef`, `alternatives`, `sessionInfo()` and
 function call used to produce the results (`runPipelineInfo.rds` file),
\item A copy of the SimpleList returned by the function 
 (`aggregated.rds`file). 
}
}
\description{
This function runs a pipeline with combinations of parameter variations on 
nested steps. The pipeline has to be defined as a list of functions applied 
consecutively on their respective outputs. See 'examples' for more details.
}
\examples{

#Example of function list that will define the alternatives of the pipeline: 
source(system.file("extdata", "scrna_alternatives.R", package="pipeComp"))
scrna_seurat_defAlternatives()

# We can also specify the alternatives manually:
alternatives <- list(
 doubletmethod=c("none"),
 filt=c("filt.lenient"),
 norm=c("norm.seurat", "norm.seuratvst", "norm.scran"),
 sel=c("sel.vst"),
 selnb=2000,
 dr=c("seurat.pca"),
 clustmethod=c("clust.seurat"),
 maxdim=30,
 dims=c(10, 15, 20, 30),
 k=20,
 steps=4,
 resolution=c(0.01, 0.1, 0.2, 0.3, 0.5, 0.8, 1, 1.2, 2),
 min.size=50   
 )
 
# run the pipeline:
res <- runPipeline( datasets, alternatives, pipDef, nthreads=3,
  output.prefix="myfolder/" )
  
# Any additional functions can be used in the pipeline by adding them in the 
# global environment (via "scrna_alternatives.R", other R script, etc...).

pip <- mockPipeline()
datasets <- list( ds1=1:3, ds2=c(5,10,15) )
tmpdir1 <- paste0(tempdir(),"/")
res <- runPipeline(datasets, pipelineDef=pip, output.prefix=tmpdir1)
}
